pipeline {
    agent any
        environment {
            // Define DockerHub credentials ID
            DOCKERHUB_CREDENTIALS_ID = 'GilibeeDocker'
            // Docker image name
            IMAGE_NAME = 'gilibee/hailyeah'
            // Docker tag
            IMAGE_TAG = 'latest'
            // Deploy location (Hailyeah server) FFS
            // DEPLOY_IP = '13.49.145.240'
            EKS_URL = 'https://E85A90E02EDE053F6B01BDD877119D32.gr7.eu-north-1.eks.amazonaws.com'
            CLUSTER_NAME = "hailyeah"
            HELM_CHART = "EKS/Helm/"
            GITHUB_CREDENTIALS_ID = "Github_user"
            CD_REPO = "Gilibee-goode/Hailyeah-ArgoCD"
            CD_REPO_NAME = "Hailyeah-ArgoCD"
            // DOCKER_IMAGE_VERSION = "0.0.1"
            // STUFF = "1"
        }
        stages {
            stage('Build Docker Image') {
                steps {
                    // Build Docker image using Docker Pipeline plugin
                    script {
                        sh 'echo "starting dorker image build"'
                        docker.build("${IMAGE_NAME}:${IMAGE_TAG}")
                    }
                }
            }
            // stage('Run Pytest in Container') {
            //     steps {
            //         // Run a container from the image and execute pytest
            //         script {
            //             sh 'Running container to check image via Pytest'
            // 	    docker.image("${IMAGE_NAME}:${IMAGE_TAG}").run('--name hailyeah -d --rm -p 80:80')
            //             dir('./API_Project') {
            //                 // run pytest
            //                 sh 'pytest'        	    
            //             }
            //         }
            //     }
            // }
            stage('Push Image to DockerHub') {
                steps {
                    script {
                        // Login and push to DockerHub using Docker Pipeline plugin
                        sh 'echo Pushing image to Dorkerhub'
                        docker.withRegistry('https://index.docker.io/v1/', DOCKERHUB_CREDENTIALS_ID) {
                            docker.image("${IMAGE_NAME}:${IMAGE_TAG}").push("${IMAGE_TAG}")
                            docker.image("${IMAGE_NAME}:${IMAGE_TAG}").push("build-${BUILD_NUMBER}")
                        }
                    }
                }
            }

            stage('Update ArgoCD Deploy Repository') {
                steps {
                    withCredentials([usernamePassword(credentialsId: GITHUB_CREDENTIALS_ID, passwordVariable: 'GITHUB_USER', usernameVariable: 'Unused')]) {
                        script{
                            dir('/home/jenkins/workspace'){

                                sh "git clone https://${GITHUB_USER}@github.com/${CD_REPO}.git"
                                dir("/home/ubuntu/jenkins/workspace/${env.JOB_BASE_NAME}"){
                                    sh 'chmod +x ./update_tag.sh'
                                    sh "./update_tag.sh build-${BUILD_NUMBER}"

                                    sh 'git add .'
                                    sh 'git config --global user.email JenkinsAgent@nomail.com'
                                    sh 'git config --global user.name JenkinsAgent'
                                    sh """git commit -m "Jenkins image update tag to: ${BUILD_NUMBER}"""
                                    sh "git push"
                                }
                                sh "rm -rf ./${Hailyeah-ArgoCD}/"
                            }
                        }
                    }
                }
            }
        


            // stage('Deploy to EKS using Helm'){
            //     steps {
            //         withKubeConfig([credentialsId: 'EKS_Token', serverUrl: "${EKS_URL}"]) {
            //             sh "helm upgrade --reuse-values --set weatherAppImage.repository=${IMAGE_NAME} --set weatherAppImage.tag=build-${BUILD_NUMBER} ${CLUSTER_NAME} ${HELM_CHART}"
            //         }
            //     }

            // }



        // stage('Deploy to AWS - sh') {
        //         steps {
        //             withCredentials([sshUserPrivateKey(credentialsId: 'aws-ssh-ubuntu', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
        //                 script {
        //                     sh "ssh-keyscan -H ${DEPLOY_IP} >> ~/.ssh/known_hosts"
        //                     //docker.image("${IMAGE_NAME}:${IMAGE_TAG}").run('--name hailyeah -d --rm -p 80:80')
        //                     //sh "ssh -i ${SSH_PRIVATE_KEY} ubuntu@${DEPLOY_IP} docker pull bensh99/simpleapp:latest"
        //                     sh "ssh -i ${SSH_PRIVATE_KEY} ubuntu@${DEPLOY_IP} docker pull ${IMAGE_NAME}:${IMAGE_TAG}"
        //                     sh "ssh -i ${SSH_PRIVATE_KEY} ubuntu@${DEPLOY_IP} docker kill hailyeah || true"
        //                     sh "ssh -i ${SSH_PRIVATE_KEY} ubuntu@${DEPLOY_IP} docker container prune -f"
        //                     sh "ssh -i ${SSH_PRIVATE_KEY} ubuntu@${DEPLOY_IP} docker run --rm --name hailyeah -p 80:80 -d ${IMAGE_NAME}:${IMAGE_TAG}"
        //                 }
        //             }
        //         }
        //     }
        }

        post {
                always {
                    // Clean up Docker images
                    script {
                        // sh 'docker kill hailyeah'
                        sh 'echo PLACEHODER KILL CONTAINER'
                        }
                    }
                success {
                    sh 'echo CHA-CHAING! Success!'
                    // slackSend(channel: "#jenkins-updates", color: "good", message: "Build #${env.BUILD_NUMBER} successful!")
                }
                failure {
                    sh 'echo Crap, pipeline failed!'
                    // slackSend(channel: "#jenkins-updates", color: "danger", message: "Build #${env.BUILD_NUMBER} failed successfully!")
                }
            }
    }
    
    
 
